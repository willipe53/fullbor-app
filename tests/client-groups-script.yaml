# Client Groups API Test Script
# Tests the complete lifecycle of client group operations
# Run with: ./comprehensive-api-test.py client-groups-script.yaml
# (Authentication and base URL are enabled by default)

defaults:
  headers:
    Content-Type: "application/json"
  timeout: 30

tests:
  # Step 1: Count the original number of client groups returned
  - name: "Count original client groups"
    request:
      method: GET
      url: "/client-groups"
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
    extract:
      original_count: "length(data)"

  # Step 2: Create a new entity called Test Entity from API
  - name: "Create new client group - Test Entity from API"
    request:
      method: POST
      url: "/client-groups"
      json:
        client_group_name: "Test Client Group {{timestamp}}"
        description: "Created by API test script"
    expect:
      status: 201
      json:
        - path: "message"
          equals: "Client group created successfully"

  # Step 3: Count the number of client groups returned, expect ORIGINAL_COUNT+1
  - name: "Verify client group count increased"
    request:
      method: GET
      url: "/client-groups"
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
        - path: "length(data)"
          equals: "{{original_count + 1}}"

  # Step 4: Change one of the attributes of the entity (Update the client group)
  - name: "Update client group attributes"
    request:
      method: PUT
      url: "/client-groups/Test Client Group {{timestamp}}"
      json:
        client_group_name: "Test Client Group {{timestamp}}"
        description: "Updated test client group description"
        is_active: true
    expect:
      status: 200
      json:
        - path: "message"
          equals: "Client group updated successfully"

  # Step 5a: Clear all entities for the client group first
  - name: "Clear entities for client group (remove all)"
    request:
      method: PUT
      url: "/client-groups/Byrde Family Foundation/entities:set"
      json:
        entity_ids: []
    expect:
      status: 200
      json:
        - path: "message"
          exists: true

  # Step 5b: Set entities for the client group (using entity IDs 1,2,4,5,6)
  - name: "Set entities for client group"
    request:
      method: PUT
      url: "/client-groups/Byrde Family Foundation/entities:set"
      json:
        entity_ids: [1, 2, 4, 5, 6]
    expect:
      status: 200
      json:
        - path: "message"
          exists: true

  # Step 5c: Get entities for the client group (verify the entities were set)
  - name: "Get entities for client group"
    request:
      method: GET
      url: "/client-groups/Byrde Family Foundation/entities"
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"
        - path: "count"
          exists: true
          type: "integer"

  # Step 5d: Set users for the client group (using existing user sub)
  - name: "Set users for client group"
    request:
      method: PUT
      url: "/client-groups/Byrde Family Foundation/users:set"
      json:
        sub_values: ["11111111-2222-3333-4444-555555555555"]
    expect:
      status: 200
      json:
        - path: "message"
          exists: true

  # Step 6: Confirm that attributes have been updated
  - name: "Verify updated client group"
    request:
      method: GET
      url: "/client-groups/Test Client Group {{timestamp}}"
    expect:
      status: 200
      json:
        - path: "@"
          exists: true

  # Step 7: Delete the test record
  - name: "Delete test client group"
    request:
      method: DELETE
      url: "/client-groups/Test Client Group {{timestamp}}"
    expect:
      status: 204

  # Step 8: Expect zero records returned (404 or empty response)
  - name: "Verify test client group is deleted"
    request:
      method: GET
      url: "/client-groups/Test Client Group {{timestamp}}"
    expect:
      status: 200
      json:
        - path: "error"
          exists: true

  # Step 9: Expect the ORIGINAL_COUNT returned (back to original state)
  - name: "Verify client group count back to original"
    request:
      method: GET
      url: "/client-groups"
    expect:
      status: 200
      json:
        - path: "data"
          exists: true

  # Additional test: Verify Byrde Family Foundation exists
  - name: "Verify Byrde Family Foundation exists (basic existence check)"
    request:
      method: GET
      url: "/client-groups/Byrde Family Foundation"
    expect:
      status: 200
      json:
        - path: "@"
          exists: true

  # Pagination Tests
  - name: "Test pagination - count only"
    request:
      method: GET
      url: "/client-groups?count=true"
    expect:
      status: 200
      json:
        - path: "count"
          exists: true
          type: "integer"
    extract:
      total_count: "count"

  - name: "Test pagination - limit=1, offset=0"
    request:
      method: GET
      url: "/client-groups"
      params:
        limit: 1
        offset: 0
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"
        - path: "count"
          exists: true
          type: "integer"
        - path: "limit"
          equals: 1
        - path: "offset"
          equals: 0
        - path: "length(data)"
          equals: 1

  - name: "Test pagination - limit=1, offset=1"
    request:
      method: GET
      url: "/client-groups"
      params:
        limit: 1
        offset: 1
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"
        - path: "count"
          exists: true
          type: "integer"
        - path: "limit"
          equals: 1
        - path: "offset"
          equals: 1
        - path: "length(data)"
          less_than_or_equal: 1

  # === SORTING TESTS ===

  - name: "Test sorting by client_group_name ascending"
    request:
      method: GET
      url: "/client-groups"
      params:
        sort_by: "client_group_name"
        sort_order: "asc"
        limit: 10
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"

  - name: "Test sorting by client_group_name descending"
    request:
      method: GET
      url: "/client-groups"
      params:
        sort_by: "client_group_name"
        sort_order: "desc"
        limit: 10
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"

  - name: "Test sorting by update_date ascending"
    request:
      method: GET
      url: "/client-groups"
      params:
        sort_by: "update_date"
        sort_order: "asc"
        limit: 10
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"

  - name: "Test sorting by update_date descending"
    request:
      method: GET
      url: "/client-groups"
      params:
        sort_by: "update_date"
        sort_order: "desc"
        limit: 10
    expect:
      status: 200
      json:
        - path: "data"
          exists: true
          type: "array"
