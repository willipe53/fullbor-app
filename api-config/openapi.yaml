openapi: 3.0.3
info:
  title: FullBor API
  version: 1.0.0
  x-logo:
    url: https://docs.fullbor.ai/boar34black_small.png
    altText: Fullbor.ai
  description: |
    FullBor v2 API (API Gateway + Lambda).  
    All endpoints require the current user context via `X-Current-User-Id` header which constrains the data that the user can access.

    For referential fields (client group, entity type, transaction type/status, entities, etc.) the API expects and returns **string names** rather than integer IDs.  
    Association "set" endpoints optionally accept ID arrays in addition to name arrays for convenience.

     **OVERVIEW**
    ------------
    The API has 44 endpoints across 9 main resource areas:

    **CLIENT GROUPS (9 endpoints):**
    - GET    /client-groups
    - GET    /client-groups/{client_group_name}
    - POST   /client-groups
    - PUT    /client-groups/{client_group_name}
    - DELETE /client-groups/{client_group_name}
    - PUT    /client-groups/{client_group_name}/entities:set
    - PUT    /client-groups/{client_group_name}/users:set
    - GET    /client-groups/{client_group_name}/entities
    - GET    /client-groups/{client_group_name}/users

    **ENTITIES (5 endpoints):**
    - GET    /entities
    - GET    /entities/{entity_name}
    - POST   /entities
    - PUT    /entities/{entity_name}
    - DELETE /entities/{entity_name}

    **ENTITY TYPES (5 endpoints):**
    - GET    /entity-types
    - GET    /entity-types/{entity_type_name}
    - POST   /entity-types
    - PUT    /entity-types/{entity_type_name}
    - DELETE /entity-types/{entity_type_name}

    **TRANSACTIONS (5 endpoints):**
    - GET    /transactions
    - GET    /transactions/{transaction_id}
    - POST   /transactions
    - PUT    /transactions/{transaction_id}
    - DELETE /transactions/{transaction_id}

    **TRANSACTION TYPES (5 endpoints):**
    - GET    /transaction-types
    - GET    /transaction-types/{transaction_type_name}
    - POST   /transaction-types
    - PUT    /transaction-types/{transaction_type_name}
    - DELETE /transaction-types/{transaction_type_name}

    **TRANSACTION STATUSES (1 endpoint):**
    - GET    /transaction-statuses

    **POSITION KEEPER (3 endpoints):**
    - GET    /position-keeper/status
    - POST   /position-keeper/start/{mode}  (mode: incremental | full-refresh)
    - POST   /position-keeper/stop

    **USERS (5 endpoints):**
    - GET    /users
    - GET    /users/{sub}
    - POST   /users
    - PUT    /users/{sub}
    - DELETE /users/{sub}

    **INVITATIONS (6 endpoints):**
    - GET    /invitations (supports ?redeemed filter)
    - GET    /invitations/{invitation_id}
    - POST   /invitations
    - PUT    /invitations/{invitation_id}
    - DELETE /invitations/{invitation_id}
    - POST   /invitations/redeem/{code}

servers:
  - url: https://api.fullbor.ai/v2
tags:
  - name: ClientGroups
  - name: Entities
  - name: EntityTypes
  - name: Transactions
  - name: TransactionTypes
  - name: TransactionStatuses
  - name: PositionKeeper
  - name: Users
  - name: Invitations
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://app.fullbor.ai'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Current-User-Id'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://app.fullbor.ai'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Current-User-Id'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
    responseTemplates:
      application/json: '{"message":$context.error.messageString}'
components:
  securitySchemes:
    CognitoUserPools:
      type: apiKey
      in: header
      name: Authorization
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:us-east-2:316490106381:userpool/us-east-2_IJ1C0mWXW
  parameters:
    CurrentUserIdHeader:
      name: X-Current-User-Id
      in: header
      required: true
      description: The **current_user_id** context used for authorization scoping.
      schema:
        type: string
  schemas:
    ClientGroup:
      type: object
      properties:
        client_group_id:
          type: integer
        client_group_name:
          type: string
        preferences:
          type: object
          additionalProperties: true
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - client_group_name
    Entity:
      type: object
      properties:
        entity_id:
          type: integer
          description: Internal database ID
        entity_name:
          type: string
        entity_type_name:
          type: string
        attributes:
          type: object
          additionalProperties: true
        unitized:
          type: boolean
          description: Indicates if the entity is unitized
          default: false
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - entity_id
        - entity_name
        - entity_type_name
    EntityType:
      type: object
      properties:
        entity_type_id:
          type: integer
          description: Internal database ID
        entity_type_name:
          type: string
        attributes_schema:
          type: object
          additionalProperties: true
        short_label:
          type: string
          maxLength: 5
          nullable: true
        label_color:
          type: string
          pattern: ^[A-Fa-f0-9]{6}$
          nullable: true
        entity_category:
          type: string
          nullable: true
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - entity_type_id
        - entity_type_name
    Transaction:
      type: object
      properties:
        transaction_id:
          type: integer
          readOnly: true
        portfolio_entity_name:
          type: string
        contra_entity_name:
          type: string
          nullable: true
        instrument_entity_name:
          type: string
          nullable: true
        transaction_status_name:
          type: string
        transaction_type_name:
          type: string
        trade_date:
          type: string
          format: date
          description: Trade date (date transaction was executed)
        settle_date:
          type: string
          format: date
          description: Settlement date (date transaction settles)
        properties:
          type: object
          additionalProperties: true
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - portfolio_entity_name
        - transaction_status_name
        - transaction_type_name
        - trade_date
        - settle_date
    TransactionType:
      type: object
      properties:
        transaction_type_id:
          type: integer
          description: Internal database ID
        transaction_type_name:
          type: string
        properties:
          type: object
          additionalProperties: true
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - transaction_type_id
        - transaction_type_name
    TransactionStatus:
      type: object
      properties:
        transaction_status_name:
          type: string
        update_date:
          type: string
          format: date-time
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - transaction_status_name
    User:
      type: object
      properties:
        user_id:
          type: integer
          description: Internal database ID
        sub:
          type: string
          description: IdP subject (Cognito sub)
        email:
          type: string
          format: email
        preferences:
          type: object
          additionalProperties: true
          nullable: true
        primary_client_group_id:
          type: integer
          nullable: true
        update_date:
          type: string
          format: date-time
          nullable: true
      required:
        - user_id
        - sub
        - email
    Invitation:
      type: object
      properties:
        invitation_id:
          type: integer
          readOnly: true
        code:
          type: string
          minLength: 16
          maxLength: 16
          readOnly: true
        expires_at:
          type: string
          format: date-time
        client_group_name:
          type: string
        email_sent_to:
          type: string
          format: email
          nullable: true
        updated_by_user_name:
          type: string
          nullable: true
      required:
        - expires_at
        - client_group_name
    ClientGroupEntitiesSetRequest:
      type: object
      properties:
        entity_names:
          type: array
          items:
            type: string
        entity_ids:
          type: array
          items:
            type: integer
      description: Provide either `entity_names` (preferred) or `entity_ids`.
      anyOf:
        - required:
            - entity_names
        - required:
            - entity_ids
    ClientGroupUsersSetRequest:
      type: object
      properties:
        sub_values:
          type: array
          items:
            type: string
        user_ids:
          type: array
          items:
            type: integer
        user_names:
          type: array
          items:
            type: string
      description: Provide either `sub_values` (preferred), `user_names` (email addresses), or `user_ids`.
      anyOf:
        - required:
            - sub_values
        - required:
            - user_names
        - required:
            - user_ids
    TransactionsQuery:
      type: object
      properties:
        portfolio_entity_name:
          type: string
        contra_entity_name:
          type: string
        instrument_entity_name:
          type: string
        transaction_status_name:
          type: string
        transaction_type_name:
          type: string
security:
  - CognitoUserPools:
      - openid
      - email
      - profile
paths:
  /client-groups:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - ClientGroups
      summary: List Client Groups or get count
      description: |
        Query client groups with optional filters. Supports:
        - Get client groups for a specific user: ?email=user@example.com
        - Get count only: ?count=true
        - Get count for specific user: ?email=user@example.com&count=true

        Security: Users can only access client groups they have permission to see.
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Return client groups that include a specific user (by email)
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Client groups or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ClientGroup"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                user_client_groups:
                  summary: User's Client Groups
                  value:
                    data:
                      - client_group_name: "Byrde Family Foundation"
                        preferences:
                          setting_1: "value1234"
                          new_setting: "new_value"
                        update_date: "2025-09-30T22:14:53Z"
                        updated_by_user_name: "peter@fullbor.ai"
                    count: 1
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - ClientGroups
      summary: Create a Client Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientGroup"
            examples:
              create_client_group:
                summary: Create New Client Group
                value:
                  client_group_name: "Test Client Group"
                  description: "Created by API test script"
      responses:
        "201":
          description: Created
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /client-groups/{client_group_name}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: client_group_name
        required: true
        schema:
          type: string
    get:
      tags:
        - ClientGroups
      summary: Get a Client Group by name
      responses:
        "200":
          description: Client group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientGroup"
              examples:
                client_group_by_name:
                  summary: Client Group by Name
                  value:
                    client_group_name: "Byrde Family Foundation"
                    preferences: {}
                    update_date: "2025-09-30T22:14:53Z"
                    updated_by_user_name: "peter@fullbor.ai"
        "400": &id001
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id002
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id003
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - ClientGroups
      summary: Update a Client Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientGroup"
            examples:
              update_client_group:
                summary: Update Client Group
                value:
                  client_group_name: "Test Client Group"
                  description: "Updated test client group description"
                  is_active: true
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientGroup"
        "400": *id001
        "401": *id002
        "403": *id003
    delete:
      tags:
        - ClientGroups
      summary: Delete a Client Group
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Client group deleted successfully
                  value:
                    message: "Client group deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Client group not found
                  value:
                    error: "Client group not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "Client group not found or access denied"
  /client-groups/{client_group_name}/entities:set:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: client_group_name
        required: true
        schema:
          type: string
    put:
      tags:
        - ClientGroups
      summary: Set Entities that are valid for a Client Group
      description: |
        Sets the complete list of entities for a client group (replaces all, doesn't add/remove individual entities).
        Accepts entity_names or entity_ids.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientGroupEntitiesSetRequest"
            examples:
              set_entities_by_names:
                summary: Set Entities by Names
                value:
                  entity_names: ["Entity 1", "Entity 2", "Entity 3"]
              set_entities_by_ids:
                summary: Set Entities by IDs
                value:
                  entity_ids: [1, 2, 3, 4, 5]
              clear_entities:
                summary: Clear All Entities (Empty Array)
                value:
                  entity_names: []
      responses:
        "200":
          description: Associations updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /client-groups/{client_group_name}/users:set:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: client_group_name
        required: true
        schema:
          type: string
    put:
      tags:
        - ClientGroups
      summary: Set Users that are valid for a Client Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientGroupUsersSetRequest"
      responses:
        "200":
          description: Associations updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /client-groups/{client_group_name}/entities:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: client_group_name
        required: true
        schema:
          type: string
    get:
      tags:
        - ClientGroups
      summary: List Entities that are valid for a Client Group
      description: |
        Returns all entities that belong to the specified client group.
        Security: Users can only access entities from client groups they have permission to view.
      parameters:
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Entities in client group
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Entity"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /client-groups/{client_group_name}/users:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: client_group_name
        required: true
        schema:
          type: string
    get:
      tags:
        - ClientGroups
      summary: List Users that are valid for a Client Group
      description: |
        Returns all users that belong to the specified client group.
        Security: Users can only access users from client groups they have permission to view.
      parameters:
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Users in client group
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /entities:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - Entities
      summary: List Entities (filter by entity type, entity_category, or client group)
      description: |
        Returns entities that the authenticated user has access to through their client groups.
        SECURITY: Users can only see entities they have access to - user_name parameter removed for security.
      parameters:
        - in: query
          name: entity_type_name
          schema:
            type: string
          description: Filter entities by entity type name
        - in: query
          name: entity_category
          schema:
            type: string
          description: Filter entities by entity category (Person, Instrument, Currency, Holding, etc.)
        - in: query
          name: client_group_name
          schema:
            type: string
          description: Filter entities by client group name
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Entities or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Entity"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
        "400": &id004
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id005
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id006
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - Entities
      summary: Create an Entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
            examples:
              create_entity:
                summary: Create New Entity
                value:
                  entity_name: "Test Entity"
                  entity_type_name: "Investor"
                  attributes:
                    test_attribute: "original_value"
                    created_via: "api_test"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id004
        "401": *id005
        "403": *id006
  /entities/{entity_name}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: entity_name
        required: true
        schema:
          type: string
    get:
      tags:
        - Entities
      summary: Get an Entity by name
      responses:
        "200":
          description: Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "400": &id007
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id008
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id009
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Entities
      summary: Update an Entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id007
        "401": *id008
        "403": *id009
    delete:
      tags:
        - Entities
      summary: Delete an Entity
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Entity deleted successfully
                  value:
                    message: "Entity deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Entity not found
                  value:
                    error: "Entity not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "Entity not found or access denied"
  /entity-types:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - EntityTypes
      summary: List Entity Types
      parameters:
        - in: query
          name: entity_category
          schema:
            type: string
          description: "Filter entity types by category. Valid categories: Person, Instrument, Currency, Holding, Capital Account, Income Account, Expense Account, Private Equity Commitment Contra"
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Entity types or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/EntityType"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                all_entity_types:
                  summary: All Entity Types
                  value:
                    data:
                      - entity_type_name: "Investor"
                        entity_category: "Person"
                        short_label: "INV"
                        label_color: "0066CC"
                        attributes_schema:
                          first_name: "string"
                          last_name: "string"
                          email: "string"
                      - entity_type_name: "Stock"
                        entity_category: "Instrument"
                        short_label: "STK"
                        label_color: "00AA00"
                        attributes_schema:
                          ticker: "string"
                          exchange: "string"
                          sector: "string"
                      - entity_type_name: "USD"
                        entity_category: "Currency"
                        short_label: "USD"
                        label_color: "FF6600"
                        attributes_schema:
                          symbol: "string"
                          decimal_places: "integer"
                instrument_entity_types:
                  summary: Filtered by entity_category=Instrument
                  value:
                    data:
                      - entity_type_name: "Stock"
                        entity_category: "Instrument"
                        short_label: "STK"
                        label_color: "00AA00"
                        attributes_schema:
                          ticker: "string"
                          exchange: "string"
                          sector: "string"
                      - entity_type_name: "Bond"
                        entity_category: "Instrument"
                        short_label: "BND"
                        label_color: "9900CC"
                        attributes_schema:
                          cusip: "string"
                          maturity_date: "date"
                          coupon_rate: "number"
                      - entity_type_name: "Option"
                        entity_category: "Instrument"
                        short_label: "OPT"
                        label_color: "CC0000"
                        attributes_schema:
                          underlying: "string"
                          strike_price: "number"
                          expiration_date: "date"
                    count: 3
                count_only:
                  summary: Count only (count=true)
                  value:
                    count: 12
        "400": &id010
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id011
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id012
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - EntityTypes
      summary: Create an Entity Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityType"
            examples:
              create_entity_type:
                summary: Create New Entity Type
                value:
                  entity_type_name: "Test Entity Type"
                  entity_category: "Person"
                  attributes:
                    test_attr: "original_value"
                    created_via: "api_test"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id010
        "401": *id011
        "403": *id012
  /entity-types/{entity_type_name}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: entity_type_name
        required: true
        schema:
          type: string
    get:
      tags:
        - EntityTypes
      summary: Get an Entity Type by name
      responses:
        "200":
          description: Entity type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityType"
        "400": &id013
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id014
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id015
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - EntityTypes
      summary: Update an Entity Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityType"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id013
        "401": *id014
        "403": *id015
    delete:
      tags:
        - EntityTypes
      summary: Delete an Entity Type
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Entity type deleted successfully
                  value:
                    message: "Entity type deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Entity type not found
                  value:
                    error: "Entity type not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "User has no client group affiliations or access denied"
  /transactions:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - Transactions
      summary: List Transactions (filterable) or return count
      parameters:
        - in: query
          name: portfolio_entity_name
          schema:
            type: string
        - in: query
          name: contra_entity_name
          schema:
            type: string
        - in: query
          name: instrument_entity_name
          schema:
            type: string
        - in: query
          name: transaction_status_name
          schema:
            type: string
        - in: query
          name: transaction_type_name
          schema:
            type: string
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Transactions or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
                  - type: object
                    properties:
                      count:
                        type: integer
        "400": &id016
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id017
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id018
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - Transactions
      summary: Create a Transaction (name-based foreign keys)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
            examples:
              create_transaction:
                summary: Create Management Fee Transaction
                value:
                  portfolio_entity_name: "Peter Piper Portfolio"
                  contra_entity_name: "Manager Expenses"
                  instrument_entity_name: "Harry Hedge Fund"
                  transaction_type_name: "Management fees"
                  trade_date: "2025-10-15"
                  settle_date: "2025-10-17"
                  properties:
                    amount: 1000000
                    currency_code: "Swedish Krona"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id016
        "401": *id017
        "403": *id018
  /transactions/{transaction_id}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: transaction_id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Transactions
      summary: Get Transaction by ID
      responses:
        "200":
          description: Transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400": &id019
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id020
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id021
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Transactions
      summary: Update Transaction (name-based foreign keys)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id019
        "401": *id020
        "403": *id021
    delete:
      tags:
        - Transactions
      summary: Delete Transaction
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Transaction deleted successfully
                  value:
                    message: "Transaction deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Transaction not found
                  value:
                    error: "Transaction not found or access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "User has no client group affiliations or access denied"
  /transaction-types:
    get:
      tags:
        - TransactionTypes
      summary: List Transaction Types
      parameters:
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Transaction types or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/TransactionType"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                buy_and_sell:
                  summary: Buy and Sell Transaction Types
                  value:
                    data:
                      - transaction_type_id: 1
                        transaction_type_name: "Buy"
                        properties:
                          type: "object"
                          title: "Buy"
                          $schema: "http://json-schema.org/draft-07/schema#"
                          required:
                            - "trade_date"
                            - "settle_date"
                            - "amount"
                            - "price"
                            - "settle_currency"
                          properties:
                            price:
                              type: "number"
                            amount:
                              type: "number"
                            trade_date:
                              type: "string"
                              format: "date"
                            settle_date:
                              type: "string"
                              format: "date"
                            settle_currency:
                              type: "string"
                              x-enum-api:
                                ["get_entities", "entity_category", "Currency"]
                          description: "Buy marketable security"
                          current_position: "trade_date"
                          forecast_position: "settle_date"
                          valid_instruments: ["FI", "FU", "EQ", "ETF", "CCY"]
                          valid_contra_groups: ["IA", "EA", "P"]
                          position_keeping_actions:
                            - "contra amount*price settle_currency down"
                            - "portfolio amount instrument up"
                        update_date: "2025-09-28T20:30:17Z"
                        updated_by_user_name: "10"
                      - transaction_type_id: 2
                        transaction_type_name: "Sell"
                        properties:
                          type: "object"
                          title: "Sell"
                          $schema: "http://json-schema.org/draft-07/schema#"
                          required:
                            - "trade_date"
                            - "settle_date"
                            - "amount"
                            - "price"
                            - "settle_currency"
                          properties:
                            price:
                              type: "number"
                            amount:
                              type: "number"
                            trade_date:
                              type: "string"
                              format: "date"
                            settle_date:
                              type: "string"
                              format: "date"
                            settle_currency:
                              type: "string"
                              x-enum-api:
                                ["get_entities", "entity_category", "Currency"]
                          description: "Sell marketable security"
                          current_position: "trade_date"
                          forecast_position: "settle_date"
                          valid_instruments: ["FI", "FU", "EQ", "ETF", "CCY"]
                          valid_contra_groups: ["IA", "EA", "P"]
                          position_keeping_actions:
                            - "contra amount*price settle_currency up"
                            - "portfolio amount instrument down"
                        update_date: "2025-09-27T17:26:43Z"
                        updated_by_user_name: "10"
                    count: 2
        "400": &id022
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id023
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id024
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - TransactionTypes
      summary: Create a Transaction Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionType"
            examples:
              create_transaction_type:
                summary: Create New Transaction Type
                value:
                  transaction_type_name: "Test Transaction Type"
                  properties:
                    test_property: "original_value"
                    created_via: "api_test"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id022
        "401": *id023
        "403": *id024
  /transaction-types/{transaction_type_name}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: transaction_type_name
        required: true
        schema:
          type: string
    get:
      tags:
        - TransactionTypes
      summary: Get a Transaction Type by name
      responses:
        "200":
          description: Transaction type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionType"
        "400": &id025
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id026
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id027
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - TransactionTypes
      summary: Update a Transaction Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionType"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id025
        "401": *id026
        "403": *id027
    delete:
      tags:
        - TransactionTypes
      summary: Delete a Transaction Type
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Transaction type deleted successfully
                  value:
                    message: "Transaction type deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Transaction type not found
                  value:
                    error: "Transaction type not found"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "User has no client group affiliations or access denied"
  /transaction-statuses:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - TransactionStatuses
      summary: List Transaction Statuses
      parameters:
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Transaction statuses or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/TransactionStatus"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                all_statuses:
                  summary: All Transaction Statuses
                  value:
                    data:
                      - transaction_status_name: "INCOMPLETE"
                        update_date: "2025-09-26T19:19:26Z"
                        updated_by_user_name: "10"
                      - transaction_status_name: "PROCESSED"
                        update_date: "2025-09-26T19:19:31Z"
                        updated_by_user_name: "10"
                      - transaction_status_name: "QUEUED"
                        update_date: "2025-09-26T19:19:29Z"
                        updated_by_user_name: "10"
                      - transaction_status_name: "UNKNOWN"
                        update_date: "2025-09-28T15:18:41Z"
                        updated_by_user_name: "10"
                    count: 4
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /position-keeper/start/{mode}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: mode
        required: true
        schema:
          type: string
          enum: [incremental, full-refresh]
        description: |
          Position Keeper mode:
          - `incremental`: Only processes QUEUED transactions (default behavior)
          - `full-refresh`: Processes ALL transactions and recalculates all positions from scratch
    post:
      tags:
        - PositionKeeper
      summary: Start the Position Keeper process
      description: |
        Starts the Position Keeper with the specified mode.

        **Modes:**
        - `incremental`: Only processes QUEUED transactions and updates positions incrementally
        - `full-refresh`: Processes ALL transactions (QUEUED + PROCESSED) and recalculates all positions from scratch
      responses:
        "201":
          description: Position Keeper started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  position_keeper_id:
                    type: integer
                  mode:
                    type: string
                  sandbox_rows_created:
                    type: integer
        "400":
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "409":
          description: Conflict - Position Keeper is already running
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /position-keeper/stop:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    post:
      tags:
        - PositionKeeper
      summary: Stop the Position Keeper process
      responses:
        "201":
          description: Position Keeper stopped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /position-keeper/status:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - PositionKeeper
      summary: Get the current status of the Position Keeper
      responses:
        "200":
          description: Position Keeper status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [running, idle]
                    description: Current status of the Position Keeper
                  holder:
                    type: string
                    nullable: true
                    description: User or process holding the lock (if running)
                  expires_at:
                    type: string
                    format: date-time
                    nullable: true
                    description: When the lock expires (if running)
              examples:
                running:
                  summary: Position Keeper is running
                  value:
                    status: "running"
                    holder: "user@example.com"
                    expires_at: "2025-10-08T15:30:00Z"
                idle:
                  summary: Position Keeper is idle
                  value:
                    status: "idle"
                    holder: null
                    expires_at: null
        "400":
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /users:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - Users
      summary: List users or get count
      description: |
        Query users by different filters. Supports:
        - Get specific user by email: ?email=user@example.com
        - Get users in a specific client group: ?client_group_name=group-name
        - Get count only: ?count=true
        - Get count in client group: ?client_group_name=group-name&count=true

        Security: Users can only access users they have permission to see based on their client groups.
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Find user by email address
        - in: query
          name: client_group_name
          schema:
            type: string
          description: Filter users by client group name
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Users or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                sample_users:
                  summary: Sample Users
                  value:
                    data:
                      - user_id: 234
                        sub: "cafebabe-beef-dead-f00d-c0ffeec0ffee"
                        email: "mark@fullbor.ai"
                        preferences:
                          coffee: "black"
                        primary_client_group_id: 19
                        update_date: "2025-09-28T21:29:26Z"
                      - user_id: 8
                        sub: "11111111-2222-3333-4444-555555555555"
                        email: "peter@fullbor.ai"
                        preferences: {}
                        primary_client_group_id: 19
                        update_date: "2025-09-28T20:30:41Z"
                    count: 2
        "400": &id034
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id035
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id036
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - Users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              create_user:
                summary: Create New User
                value:
                  sub: "cafebabe-beef-dead-f00d-c0ffeec0ffee"
                  email: "foo@bar.com"
                  preferences:
                    a: "b"
                  primary_client_group_id: 19
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id034
        "401": *id035
        "403": *id036
  /users/{sub}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: sub
        required: true
        schema:
          type: string
          description: Cognito user ID (sub)
    get:
      tags:
        - Users
      summary: Get user by Cognito sub
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                user_by_sub:
                  summary: User by Cognito Sub
                  value:
                    user_id: 234
                    sub: "cafebabe-beef-dead-f00d-c0ffeec0ffee"
                    email: "mark@fullbor.ai"
                    preferences:
                      coffee: "black"
                    primary_client_group_id: 19
                    update_date: "2025-09-28T21:29:26Z"
        "400": &id037
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id038
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id039
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Users
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              update_user:
                summary: Update User Preferences
                value:
                  preferences:
                    a: "c"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400": *id037
        "401": *id038
        "403": *id039
    delete:
      tags:
        - Users
      summary: Delete user
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: User deleted successfully
                  value:
                    message: "User deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: User not found
                  value:
                    error: "User not found or access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "User has no client group affiliations or access denied"
  /invitations:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
    get:
      tags:
        - Invitations
      summary: List invitations for the current user
      parameters:
        - in: query
          name: redeemed
          schema:
            type: boolean
          description: Filter invitations by redemption status. Use 'true' for redeemed invitations, 'false' for unredeemed invitations.
        - in: query
          name: count
          schema:
            type: boolean
            default: false
          description: If true, returns only a count
      responses:
        "200":
          description: Invitations or count
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Invitation"
                      count:
                        type: integer
                  - type: object
                    properties:
                      count:
                        type: integer
              examples:
                user_invitations:
                  summary: User's Invitations
                  value:
                    data:
                      - invitation_id: 91
                        code: "6f3c3ede9f0511f0"
                        expires_at: "2025-12-31T23:59:59Z"
                        client_group_name: "Byrde Family Foundation"
                        email_sent_to: "test@example.com"
                        updated_by_user_name: "81"
                    count: 1
        "400": &id040
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401": &id041
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403": &id042
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - Invitations
      summary: Create a new invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invitation"
            examples:
              create_invitation:
                summary: Create New Invitation
                value:
                  client_group_name: "Byrde Family Foundation"
                  email_sent_to: "test@example.com"
                  expires_at: "2025-12-31T23:59:59Z"
      responses:
        "201":
          description: Created
        "400": *id040
        "401": *id041
        "403": *id042
  /invitations/{invitation_id}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: invitation_id
        required: true
        schema:
          type: integer
    get:
      tags:
        - Invitations
      summary: Get an invitation by ID
      responses:
        "200":
          description: Invitation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
              examples:
                invitation_by_id:
                  summary: Invitation by ID
                  value:
                    invitation_id: 91
                    code: "6f3c3ede9f0511f0"
                    expires_at: "2025-12-31T23:59:59Z"
                    client_group_name: "Byrde Family Foundation"
                    email_sent_to: "user@example.com"
                    updated_by_user_name: "peter@endowment.org"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Invitations
      summary: Update an invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invitation"
            examples:
              update_invitation:
                summary: Update Invitation Expiration
                value:
                  expires_at: "2025-12-31T23:59:59Z"
                  client_group_name: "Byrde Family Foundation"
                  email_sent_to: "test@example.com"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Invitation updated successfully
                  value:
                    message: "Invitation updated successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                invalid_data:
                  summary: Invalid invitation data
                  value:
                    error: "Invalid invitation data provided"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "Invitation not found or access denied"
    delete:
      tags:
        - Invitations
      summary: Delete an invitation
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                success:
                  summary: Invitation deleted successfully
                  value:
                    message: "Invitation deleted successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                not_found:
                  summary: Invitation not found
                  value:
                    error: "Invitation not found or access denied"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                unauthorized:
                  summary: User not found
                  value:
                    error: "User not found"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                access_denied:
                  summary: Access denied
                  value:
                    error: "User has no client group affiliations or access denied"
  /invitations/redeem/{code}:
    parameters:
      - $ref: "#/components/parameters/CurrentUserIdHeader"
      - in: path
        name: code
        required: true
        schema:
          type: string
          minLength: 16
          maxLength: 16
    post:
      tags:
        - Invitations
      summary: Redeem an invitation code
      responses:
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "201":
          description: Invitation redeemed
          content:
            application/json:
              schema:
                type: object
                description: Response for /invitations/redeem/{code} POST
